*************************************************************************
* File : README.txt 							*
* Developers : Amar Lalwani 						*
* Raghav Bali 								*
* Date : May 20 2013 							*
* Author : Raghav Bali 							*
* Version : 1.0							*
*************************************************************************


This is a Frequent Itemset based Hierarchical Clustering Algorithm's implementation. This algorithm has been implemented using python. The running of this algorithm is dependent upon TBRS (available for download at : http://code.google.com/p/boolean-retrieval-system/) and python-fp-growth developed by Eric (included in this repository itself also at its original repository : https://github.com/enaeseth/python-fp-growth). Do read the below instructions carefully before executing. The execution is fairly simple and well explained below. Please let us know incase of any difficulties.

Project Setup

----------------------

The project is developed in python and has the following folder structue :

cluster/python-fp-growth-master/ : This folder contains the following files :

   + main.py         : This is the driver program for the clustering algorithm.

   + clustering_v1.py     : This contains the overall clustering algorithm logic.

   + fp_growth.py         : This file is part of the python-fp-growth-master developed by Eric Naeseth. It is being used as is for calculation of  

                         global frequent itemsets. (setup details provided below)

   + input.txt         : This file contains the list of documents present in the corpus. These documents are clustered by the algorithm.

   + postingslist.txt     : This file contains the output of preprocessing step in the triplet form (explained in the above section)

   

cluster/ClusterOutput/ :     This folder contains the output files generated by the Clustering algorithm. The output files generated are :

   

   + disjoint_clusters.txt     : This file contains the disjoint clusters formed by the clustering algorithm before the tree is formed.

   + descendants.txt            : This file contains descendants calculated after formation of disjoint clusters.

   + initial_cluster_tree.txt    : This file contains the initial tree structure. This is the primary structure over which pruning

                                 and merging is performed.

   + pruned_clusters.txt        : This file contains clusters pruned as per the similarrity functions.

   + pruned_tree.txt            : This is the tree of the pruned clusters.

   + output_clusters.txt        : This file contains the final set of clusters formed by the algorithm.

   + output_tree.txt            : This file contains the final hierarchy tree formed by the algorithm.

   + cluster_description.txt    : This file contains the addtional information regarding each of the final clusters.

The project utilises TBRS along with python-fp-growth project to accomplish the objectives (no other internal/third party libraries have been used).

This requires placing this project's parent directory (cluster) in the directory containing TBRS v1.1

Prequisites :

Installing python-fp-growth :

1. Make sure your system contains python 2.7 or above and the path for python is set correctly.

2. Download TBRS and extract the contents.

3. Download the Hierarchical clustering implementation and place the directory "cluster" within TBRS root folder.

4. Go to cluster/python-fp-growth-master/ directory

5. On the terminal, execute the following command  : sudo python setup.py install

6. This completes the instalation of python-fp-growth is complete.

Building TBRS :

1. Go to the build directory of the extracted TBRS (downloaded in the previous step).

2. Execute the following command to build the ClusterPreprocessing executable : make -f ../build/Makefile_example_cluster_preprocessing  

3. Once this is done, go to the bin directory.

4. The ClusterPreprocessing executable should be present here.

Bugs
-----------------
Please drop a mail to either/both of the developers if you come across bugs/errors.


